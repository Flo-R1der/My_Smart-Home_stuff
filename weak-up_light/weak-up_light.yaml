blueprint:
  name: Weak-up Light with sunrise effect
  description: >-
    Can control any dimmable ligth between two brightness values choosen in the blueprint
  domain: automation
  author: Flo-R1der (https://github.com/Flo-R1der)
  homeassistant:
    min_version: 2024.6.0
  input:

    start_section:
      name: START and STOP Triggers
      icon: mdi:star-shooting
      input:
        schedule_entity:
          name: Schedule Entity
          description: >-
            **Recommended!** use a schedule [helper](/config/helpers) to START **and** STOP the light. <br>
            Can be empty if you like to use another trigger.
          default: null
          selector:
            entity:
              domain: schedule
        alarm_sensor:
          name: Alarm timestamp sensor
          description: >-
            Sensor with timestamp of next alarm (e.g. mobile device with companion-app)
            with device_class: `timestamp`. <br>
            Can be empty, if you like to use another trigger.
          default: null
          selector:
            entity:
              device_class: timestamp
              multiple: false
        custom_time:
          name: Custom alarm time
          description: >-
            Time to trigger the alarm every day, if the other sensor are not set. <br>
            **WARNING**: Settings at or shortly after midnight will not work as expected!
          default: null
          selector:
            time: 
        custom_start:
          name: Custom Start time
          description: >-
            If the settings from above does not meet your requirement, 
            you can also set a custom START trigger.
          default: []
          selector:
            trigger:
        # custom_stop:
        #   name: Custom Stop time
        #   description: >-
        #     You can also set a custom STOP trigger.
        #   default: []
        #   selector:
        #     trigger:

    condition_section:
      name: CONDITIONS to procceed
      icon: mdi:help-circle-outline
      input:
        check_workday_sensor:
          name: Check Workday Sensor
          description: >-
            Check if the current day is a workday and skip the wake-up light if not. <br>
            **REQUIREMENT**: The **[Workday](https://www.home-assistant.io/integrations/workday/)**-Sensor
            must be set up! If you haven't set up the sensor you can do this using
            [this link](https://my.home-assistant.io/redirect/config_flow_start?domain=uptime).
          default: true
          selector:
            boolean:
        check_anyone_home:
          name: Check if anyone is at home?
          description: >-
            Check if anyone is in the `zone.home` and skip the wake-up light if not. <br>
            This can be helpfull if you let your mobile devices check-in and check-out
            in your home-zone. <br> **REQUIREMENT**: Mobile devices with companion-app.
          default: true
          selector:
            boolean:
        check_person_zone:
          name: Check if a specific person is at home?
          description: >- 
            If you enable this Option, you must enter a person below!
          default: false
          selector:
            boolean:
        person_to_check:
          name: Which person should be at home?
          description: >-
            Check if the selected person is in `zone.home` and skip the wake-up light if not. <br>
          default: null
          selector:
            entity:
              domain: person
        custom_conditions:
          name: Custom conditions to check.
          description: >-
            Here you can add for custom conditions to check, before the automation should procceed. <br>
            EXAMPLE: A template condition checking your calendar for Vacation/Holiday events: <br>
            ````
            {{ not ( states('calendar.work') == 'on' and 
            'Holiday' in state_attr('calendar.work', 'message') ) }}
            ````
          default: []
          selector:
            condition:
        # conditions_stop:
        #   name: Check the Conditions also for a STOP Event?
        #   description: >- 
        #     If you use a STOP event (e.g. schedule, custom stop, etc.) to turn off the light,
        #     the conditions are not considered by default. Tunr on if necessary.
        #   default: false
        #   selector:
        #     boolean:

    action_section:
      name: START ACTIONS and their behaviour
      icon: mdi:play-circle-outline
      input:
        pre_sunrise_actions:
          name: PRE-sunrise actions
          description: >-
            Optional actions to run before sunrise starts. Can be empty. <br>
            **NOTE**: This script is only controlling the brightness. If you desire a specific color
            color temperature, please set this as an PRE-action!
          default: []
          selector:
            action:
        light_device:
          name: Devices to be controlled
          selector:
            device:
              multiple: true
              entity:
                domain: light
        brightness_start:
          name: START brightness %
          description: >-
            The brightness to start with. <br>
            Some lights ignore very low values and may turn on with full brightness instead!
          default: 10
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: '%'
              mode: slider
        brightness_end:
          name: END brightness %
          description: >-
            The brightness to end with. <br>
            The value will be transitioned from the minimum to the configured value in a parabolic shape.
          default: 100
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: '%'
              mode: slider
        brightness_steps:
          name: Brightness STEPS %
          description: >-
            Defines in which % steps the brightness shoul be increased <br>
          default: 5
          selector:
            number:
              min: 1
              max: 10
              step: 1
              unit_of_measurement: '%'
              mode: slider
        duration_minutes:
          name: Sunrise duration
          description: >-
            The time how long the sunrise effect should take. <br>
            **NOTE**: When the time is over, the light will be at the max. configured brightness. <br>
            **The light will NOT turn off, when the sunrise is over!**


            **HINT**: Use the **schedule** entity in the START-Section. Then, the light will turn on
            when the schedule activates and turn off, when the schedule deactivates.
          default: 20
          selector:
            number:
              min: 5
              max: 60
              step: 5
              unit_of_measurement: min
              mode: slider
        post_sunrise_actions:
          name: POST-sunrise actions
          description: >-
            Optional actions to run after the sunrise. Can be empty. <br>
            EXAMPLE: Open the shutter in the bedroom.
          default: []
          selector:
            action:

variables:
  schedule_entity: !input schedule_entity
  #schedule_entity_enabled: "{{ schedule_entity != null }}"
  alarm_sensor: !input alarm_sensor
  #alarm_sensor_enabled: "{{ alarm_sensor != null }}"
  custom_time: !input custom_time
  custom_time_enabled: "{{ custom_time != null }}"
  # custom triggers is referenced directly (below)
  check_workday_sensor: !input check_workday_sensor
  check_anyone_home: !input check_anyone_home
  person_to_check: !input person_to_check
  check_person_zone: !input check_person_zone
  # custom conditions is referenced directly (below)
  # PRE-actions is referenced directly (below)
  light_device: !input light_device
  brightness_start: !input brightness_start
  brightness_end: !input brightness_end
  brightness_steps: !input brightness_steps
  duration_minutes: !input duration_minutes
  duration_seconds: "{{ duration_minutes * 60 }}"
  # POST-actions is referenced directly (below)
  start: "{{ now() }}"
  start_timestamp: "{{ now()|as_timestamp }}"
  endtime: "{{ (now() + timedelta(minutes=duration_minutes, seconds=10))|as_local }}"


triggers:
  - trigger: state
    alias: Scheduled START
    entity_id: !input schedule_entity
    to: 'on'
  - trigger: time
    at: !input alarm_sensor
    alias: Alarm START
  - trigger: time
    alias: Custom time START
    at: !input custom_time
  - triggers: !input custom_start
  # - trigger: state
  #   alias: Scheduled STOP
  #   entity_id: !input schedule_entity
  #   to: 'off'
  #   id: STOP

conditions:
  - condition: state
    entity_id: binary_sensor.workday_sensor
    state: "on"
    enabled: !input check_workday_sensor
    alias: WORKDAY?
  - condition: numeric_state
    entity_id: zone.home
    above: 0
    enabled: !input check_anyone_home
    alias: Anyone at HOME?
  - condition: template
    value_template: "{{ states(person_to_check) == 'home' }}"
    alias: Check PERSON Zone
    enabled: !input check_person_zone
  - condition: and
    alias: CUSTOM CONDITIONS
    conditions:
      !input custom_conditions

actions:
  - alias: PRE Actions
    sequence:
      !input pre_sunrise_actions
  - alias: Control Light in Parabolic Shape
    repeat:
      while:
        - condition: template
          value_template: "{{ now()|as_local < endtime|as_datetime|as_local }}"
      sequence:
        - variables:
            actual_runtime_seconds: "{{ now()|as_timestamp - start_timestamp }}"
            brightness_value: >-
              {{ ( (brightness_end-brightness_start) / (duration_seconds ** 2) ) 
              * actual_runtime_seconds**2 + brightness_start }}
            seconds_this_step: >-
              {{ sqrt( ( (brightness_value-brightness_start+brightness_steps) 
              * duration_seconds**2 ) / (brightness_end-brightness_start) ) }}
        - action: light.turn_on
          data:
            brightness_pct: "{{ min(brightness_value|round(0), brightness_end) }}"
          target:
            device_id: !input light_device
        - delay:
            hours: 0
            minutes: 0
            seconds: "{{ max((seconds_this_step - actual_runtime_seconds)|round, 3) }}"
        - if:
            - condition: template
              value_template: >-
                {% set light_entity = device_entities(light_device[0]) |
                select('contains', 'light.') | first | default('unknown') %} 
                {{ is_state(light_entity, 'off') }}
          then:
            - stop: Light has been turned off
  - alias: POST Actions
    sequence:
      !input post_sunrise_actions

mode: parallel
max: 10
