blueprint:
  name: Weak-up Light with sunrise effect
  description: >-
    Can control any dimmable light between two brightness values chosen in the blueprint
  domain: automation
  author: Flo-R1der (https://github.com/Flo-R1der)
  homeassistant:
    min_version: 2024.6.0
  input:

    start_section:
      name: START and STOP Triggers
      icon: mdi:star-shooting
      input:
        schedule_entity:
          name: Schedule Entity
          description: >-
            **Recommended!** Use a schedule [helper](/config/helpers) to **START and STOP** the light. <br>
            Can be empty if you like to use another trigger.
          default: null
          selector:
            entity:
              domain: schedule
        alarm_sensor:
          name: "Alarm sensor (type: timestamp)"
          description: >-
            Sensor with timestamp of next alarm (e.g. mobile device with companion-app)
            with device_class: `timestamp`. <br>
            Can be empty, if you like to use another trigger.
          default: null
          selector:
            entity:
              device_class: timestamp
              multiple: false
        custom_start_time:
          name: Custom Start time
          description: >-
            Time to trigger the start every day, if the other sensor are not set. <br>
            **WARNING**: Settings at or shortly after midnight will not work as expected!
          default: null
          selector:
            time:
        custom_end_time:
          name: Custom End time
          description: >-
            Time to turn off the light
          default: null
          selector:
            time:
        custom_trigger:
          name: Custom Trigger
          description: >-
            If the settings from above does not meet your requirement, 
            you can also set a custom trigger. If you want your trigger to be considered
            for turning off the light, simply set the ID to `END`.
          default: []
          selector:
            trigger:

    condition_section:
      name: CONDITIONS to proceed
      icon: mdi:help-circle-outline
      input:
        check_workday_sensor:
          name: Check Workday Sensor
          description: >-
            Check if the current day is a workday and skip the wake-up light if not. <br>
            **REQUIREMENT**: The [Workday](https://www.home-assistant.io/integrations/workday/)-Sensor
            must be set up! Can be done using [this link](https://my.home-assistant.io/redirect/config_flow_start?domain=workday).
          default: true
          selector:
            boolean:
        check_anyone_home:
          name: Check if anyone is at home?
          description: >-
            Check if anyone is in the `zone.home` and skip the wake-up light if not. <br>
            **REQUIREMENT**: Mobile devices with companion-app.
          default: true
          selector:
            boolean:
        check_person_zone:
          name: Check if a specific person is at home?
          description: >- 
            If you enable this Option, you must enter a person below!
          default: false
          selector:
            boolean:
        person_to_check:
          name: Which person should be at home?
          description: >-
            Check if the selected person is in `zone.home` and skip the wake-up light if not. <br>
          default: null
          selector:
            entity:
              domain: person
        custom_conditions:
          name: Custom conditions to check.
          description: >-
            Here you can add for custom conditions to check, before the automation should proceed. <br>
            **EXAMPLE**: A template condition checking your calendar for Vacation/Holiday events: <br>
            ````
            {{ not ( states('calendar.work') == 'on' and 
            'Holiday' in state_attr('calendar.work', 'message') ) }}
            ````
          default: []
          selector:
            condition:
        end_conditions_enabled:
          name: Check the Conditions also for a END Event?
          description: >- 
            If you use a END event (e.g. schedule, custom stop, etc.) to turn off the light,
            the conditions are not considered by default. Turn on if necessary.
          default: false
          selector:
            boolean:

    action_section:
      name: START ACTIONS and their behavior
      icon: mdi:play-circle-outline
      input:
        pre_sunrise_actions:
          name: PRE-sunrise actions
          description: >-
            Optional actions to run before sunrise starts. Can be empty. <br>
            **NOTE**: This script is only controlling the brightness. If you desire a specific color
            color temperature, please set this as an PRE-action!
          default: []
          selector:
            action:
        light_entities:
          name: Lights to be controlled
          selector:
            entity:
              filter:
                domain: light
              multiple: true
        brightness_start:
          name: START brightness %
          description: >-
            The brightness to start with. <br>
            Some lights ignore very low values and may turn on with full brightness instead!
          default: 10
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: '%'
              mode: slider
        brightness_end:
          name: END brightness %
          description: >-
            The brightness to end with. <br>
            The value will be transitioned from the minimum to the configured value in a parabolic shape.
          default: 100
          selector:
            number:
              min: 1
              max: 100
              step: 1
              unit_of_measurement: '%'
              mode: slider
        brightness_steps:
          name: Brightness STEPS %
          description: >-
            Defines in which % steps the brightness should be increased <br>
          default: 5
          selector:
            number:
              min: 1
              max: 10
              step: 1
              unit_of_measurement: '%'
              mode: slider
        duration_minutes:
          name: Sunrise duration
          description: >-
            The time how long the sunrise effect should take. <br>
            **NOTE**: When the time is over, the light will be at the max. configured brightness. <br>
            **The light will NOT turn off, when the sunrise is over!**


            **HINT**: Use the **schedule** entity in the START-Section. Then, the light will turn on
            when the schedule activates and turn off, when the schedule deactivates.
          default: 20
          selector:
            number:
              min: 5
              max: 60
              step: 5
              unit_of_measurement: min
              mode: slider
        # start_calc_method:
        #   name: How should the START time be calculated
        #   description: >-
        #     \- Choose **Start** if the sunrise effect should start with it's defined start brightness 
        #     when the defined Schedule/Alarm/Timer is reached.  

        #     \- Choose **End** if the sunrise effect should end with it's defined end brightness
        #     when the defined Schedule/Alarm/Timer is reached.
        #     The sunrise will take place, before the Schedule/Alarm/Timer is reached.  

        #     \- Choose **Middle** if the sunrise should take place half before the 
        #     Schedule/Alarm/Timer is reached and half afterwards.  
            
        #     **Does not work with custom trigger!**
        #   selector:
        #     select:
        #       options:
        #         - Start
        #         - End
        #         - Middle
        #   default: Start
        post_sunrise_actions:
          name: POST-sunrise actions
          description: >-
            Optional actions to run after the sunrise. Can be empty. <br>
            EXAMPLE: Open the shutter in the bedroom.
          default: []
          selector:
            action:

variables:
  schedule_entity: !input schedule_entity
  #schedule_entity_enabled: "{{ schedule_entity != null }}"
  alarm_sensor: !input alarm_sensor
  #alarm_sensor_enabled: "{{ alarm_sensor != null }}"
  custom_start_time: !input custom_start_time
  #custom_start_time_enabled: "{{ custom_start_time != null }}"
  # custom triggers is referenced directly (below)
  end_conditions_enabled: !input end_conditions_enabled
  check_workday_sensor: !input check_workday_sensor
  check_anyone_home: !input check_anyone_home
  person_to_check: !input person_to_check
  check_person_zone: !input check_person_zone
  # custom conditions is referenced directly (below)
  #start_calc_method: !input start_calc_method
  # PRE-actions is referenced directly (below)
  light_entities: !input light_entities
  brightness_start: !input brightness_start
  brightness_end: !input brightness_end
  brightness_steps: !input brightness_steps
  duration_minutes: !input duration_minutes
  duration_seconds: "{{ duration_minutes * 60 }}"
  # POST-actions is referenced directly (below)
  timestamp_start: "{{ now()|as_timestamp }}"
  timestamp_end: "{{ (now() + timedelta(minutes=duration_minutes, seconds=10))|as_local }}"


triggers:
  - trigger: state
    alias: Scheduled START
    entity_id: !input schedule_entity
    to: 'on'
  - trigger: time
    alias: Alarm START
    at: !input alarm_sensor
  - trigger: time
    alias: Custom time START
    at: !input custom_start_time
  - trigger: state
    alias: Scheduled END
    entity_id: !input schedule_entity
    to: "off"
    id: END
  - trigger: time
    alias: Custom time END
    at: !input custom_end_time
    id: END
  - triggers: !input custom_trigger

conditions:
  - condition: or
    conditions:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
      - condition: template
        value_template: "{{ trigger.id == 'END' and not end_conditions_enabled }}"
    enabled: !input check_workday_sensor
    alias: WORKDAY?
  - condition: or
    conditions:
      - condition: numeric_state
        entity_id: zone.home
        above: 0
      - condition: template
        value_template: "{{ trigger.id == 'END' and not end_conditions_enabled }}"
    enabled: !input check_anyone_home
    alias: Anyone at HOME?
  - condition: or
    conditions:
      - condition: template
        value_template: "{{ states(person_to_check) == 'home' }}"
      - condition: template
        value_template: "{{ trigger.id == 'END' and not end_conditions_enabled }}"
    alias: Check PERSON Zone
    enabled: !input check_person_zone
  - condition: or
    conditions:
      - condition: and
        conditions:
          !input custom_conditions
      - condition: template
        value_template: "{{ custom_conditions == [] or
          trigger.id == 'END' and not end_conditions_enabled }}"
    alias: CUSTOM CONDITIONS

actions:
  - if:
      - condition: trigger
        id: END
    then:
      - if:
          - condition: state
            entity_id: !input light_entities
            state: "on"
        then:
          - action: light.turn_off
            target:
              entity_id: !input light_entities
    else:
      - alias: PRE Actions
        sequence:
          !input pre_sunrise_actions
      - alias: Control Light in Parabolic Shape
        repeat:
          while:
            - condition: template
              value_template: "{{ now()|as_local < timestamp_end|as_datetime|as_local }}"
          sequence:
            - variables:
                actual_runtime_seconds: "{{ now()|as_timestamp - timestamp_start }}"
                brightness_value: >-
                  {{ ( (brightness_end-brightness_start) / (duration_seconds ** 2) ) 
                  * actual_runtime_seconds**2 + brightness_start }}
                seconds_this_step: >-
                  {{ sqrt( ( (brightness_value-brightness_start+brightness_steps) 
                  * duration_seconds**2 ) / (brightness_end-brightness_start) ) }}
            - action: light.turn_on
              data:
                brightness_pct: "{{ min(brightness_value|round(0), brightness_end) }}"
              target:
                entity_id: !input light_entities
            - delay:
                hours: 0
                minutes: 0
                seconds: "{{ max((seconds_this_step - actual_runtime_seconds)|round, 3) }}"
            - if:
                - condition: template
                  value_template: "{{ is_state(light_entities|first, 'off') }}"
              then:
                - stop: Light has been turned off
      - alias: POST Actions
        sequence:
          !input post_sunrise_actions

mode: parallel
max: 10
