blueprint:
  name: Muller Licht Remote 404049D
  description: >-
    Control lights with a [MÃ¼ller Licht 404049D](https://www.zigbee2mqtt.io/devices/404049D.html) 
    dim remote control via [MQTT trigger](https://www.home-assistant.io/docs/automation/trigger/#mqtt-trigger) 
    from **Zigbee2MQTT**.  <br>  

    Feel free to copy my blueprint and extend it or reach me out, if you found something that should be implemented.  

    Credits to [thefamouspb](https://community.home-assistant.io/t/muller-licht-tint-remote/283190)
    who provided the basis for this blueprint.
    
    
    **Like My Work?** <br>
    [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/I3I4160K4Y)
  domain: automation
  author: Flo-R1der (https://github.com/Flo-R1der)
  input:
    mqtt_topic:
      name: MQTT topic subscription
      description: >-
        - In Home Assistant go to **Devices & services** > [**MQTT**](/config/integrations/integration/mqtt)
        > **xx devices** and view the info page of your **Tint dim remote control (404049D)**  

        - On the Device Info Page, go to the **Entities-Section** > **`sensor.<device_name>_action`**
        > **Subscribed topics** > **copy the MQTT topic** which is typically `zigbee2mqtt/<device_name>`  

        - **Paste the MQTT topic here** (typically `zigbee2mqtt/<device_name>` or `zigbee2mqtt/<device_IEEE>`)
      selector:
        text:
          multiline: false
    target_light:
      name: Light(s)
      description: The light(s) to control
      selector:
        target:
          entity:
          - domain:
            - light
    color_temp_ref:
      name: Color Temperature Reference
      description: >-
        Select the light again, for proper Color Temperature setting
      selector:
        entity:
          domain:
          - light
          multiple: false
    force_brightness:
      name: Force turn on brightness
      description: Force the brightness to the set level below, when the "on" button
        on the remote is pushed and lights turn on.
      default: false
      selector:
        boolean: {}
    brightness:
      name: Brightness
      description: Brightness of the light(s) when turning on
      default: 50
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'
    step_value:
      name: Brightness increment/decrement percent
      description: Set the step percent value for brightness and color warmth
      default: 10
      selector:
        number:
          min: 1.0
          max: 20.0
          mode: slider
          step: 1.0
          unit_of_measurement: '%'

    scene_section:
      name: Scene Buttons
      icon: mdi:palette
      input:
        reading_scene:
          name: Reading Scene
          description: The scene to be triggered when the Reading Light button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false
        sunset_scene:
          name: Sunset Scene
          description: The scene to be triggered when the Sunset button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false
        party_scene:
          name: Party Scene
          description: The scene to be triggered when the Party button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false
        night_scene:
          name: Night Scene
          description: The scene to be triggered when the Night button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false
        campfire_scene:
          name: Campfire Scene
          description: The scene to be triggered when the Campfire button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false
        romantic_scene:
          name: Romantic Scene
          description: The scene to be triggered when the Romantic button is pressed
          default: []
          selector:
            entity:
              domain:
              - scene
              multiple: false

variables:
  force_brightness: !input force_brightness
  step_value: !input step_value
  color_temp_ref: !input color_temp_ref

triggers:
  - trigger: mqtt
    topic: !input mqtt_topic

conditions:
  - condition: template
    value_template: >-
      {{ trigger.payload_json.action != ''
      and trigger.payload_json.action != null }}

actions:
- variables:
    event: "{{ trigger.payload_json.action }}"
- choose:
  - conditions:
    - "{{ event == 'on' or event == 'off' }}"
    sequence:
    - if:
      - "{{ force_brightness }}"
      then:
        - service: light.toggle
          target: !input target_light
          data:
            brightness_pct: !input brightness
      else:
      - service: light.toggle
        target: !input target_light
  - conditions:
    - "{{ event == 'brightness_step_up' }}"
    sequence:
    - service: light.turn_on
      target: !input target_light
      data:
        brightness_step_pct: "{{ step_value }}"
        transition: 1
  - conditions:
    - "{{ event == 'brightness_step_down' }}"
    sequence:
    - service: light.turn_on
      target: !input target_light
      data:
        brightness_step_pct: -{{ step_value }}
        transition: 1
  - conditions:
    - "{{ event == 'color_temperature_move' }}"
    sequence:
    - service: light.turn_on
      target: !input target_light
      data:
        color_temp: "{{ trigger.payload_json.action_color_temperature }}"
  - conditions:
    - "{{ event == 'color_move' }}"
    sequence:
    - service: light.turn_on
      target: !input target_light
      data:
        xy_color:
        - "{{ trigger.payload_json.action_color.x }}"
        - "{{ trigger.payload_json.action_color.y }}"
  - conditions:
    - "{{ event == 'scene_1' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input sunset_scene
  - conditions:
    - "{{ event == 'scene_2' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input party_scene
  - conditions:
    - "{{ event == 'scene_3' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input reading_scene
  - conditions:
    - "{{ event == 'scene_4' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input campfire_scene
  - conditions:
    - "{{ event == 'scene_5' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input romantic_scene
  - conditions:
    - "{{ event == 'scene_6' }}"
    sequence:
    - service: homeassistant.turn_on
      entity_id: !input night_scene

mode: parallel
max_exceeded: silent
